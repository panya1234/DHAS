import axios from "axios";
import fs from 'fs';
import csv from 'csv-parser';
import qs from 'qs';
import { READ_PATH, PRODUCT_PATH, URL, URL_TOKEN } from './misaConfig.js';
import { APP_ID, ACCESS_CODE, ORG_COMPANY_CODE } from './misaConfig.js';

async function getTokenFromFile(filePath) {
    return new Promise((resolve, reject) => {
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                const tokenData = JSON.parse(data);
                resolve(tokenData.access_token);
            } catch (error) {
                reject(error);
            }
        });
    });
}

async function getVNSProducts(token, skip, take) {
    try {
        const response = await axios.post(`${URL}get_list_inventory_balance`,
            {
                app_id: "5f4a649a-af16-4d98-afa0-3554314642da",
                org_company_code: "congtydemoketnoiact",
                stock_id: null,
                branch_id: null,
                skip: skip,
                take: take,
                last_sync_time: null
            },
            {
                headers: {
                    'X-MISA-AccessToken': token,
                    'Content-Type': 'application/json'
                }
            });
            if (response.data.ErrorCode == 'ExpiredToken') {
                const newToken = await refreshToken();
                return await getVNSProducts(newToken);
            }
        return response.data;
    } catch (error) {
        console.error(error);
    }
}

async function refreshToken() {
    try {
        const response = await axios.post(URL_TOKEN, 
            {
                app_id: APP_ID,
                access_code: ACCESS_CODE,
                org_company_code: ORG_COMPANY_CODE
            }, 
            {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        if (response.data && response.data.Success) {
            const tokenData = JSON.parse(response.data.Data);
            const accessToken = tokenData.access_token;

            fs.writeFile('misatoken.json', JSON.stringify({ access_token: accessToken }), 'utf8', (err) => {
                if (err) throw err;
                console.log('Access token saved to misatoken.json.');
            });

            return accessToken;
        } else {
            console.error('Failed to refresh token:', response.data.ErrorMessage);
        }
    } catch (error) {
        console.error(error);
    }
}

export async function mainGetVNSProducts() {
    try {
        const token = await getTokenFromFile('misatoken.json');
        let skip = 0;
        let take = 2;
        let products = [];
        let responseSize;
        do {
            const resProducts = await getVNSProducts(token, skip, take);
            const fetchedProducts = JSON.parse(resProducts.Data);
            products = products.concat(fetchedProducts);
            responseSize = fetchedProducts.length;
            skip += take;
            take += take;
            console.log(skip);
            console.log(take);
        } while (responseSize === 2);

        console.log(responseSize);

        products.forEach(product => {
            const { inventory_item_code, 
                    stock_code, 
                    inventory_item_name ,
                    quantity_balance,
                    unit_price
                } = product;
            console.log(`Code: ${inventory_item_code}, stockCode: ${stock_code}, Code: ${inventory_item_name}`);
            console.log(`Stock: ${quantity_balance}, Cost: ${unit_price}`);
        });

    } catch (error) {
        console.error('Error in main:', error);
    }
}

mainGetVNSProducts();